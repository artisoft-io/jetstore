ARG BASE_CONTAINER=golang:1.18-bullseye
FROM ${BASE_CONTAINER} as builder
ARG BASE_CONTAINER

# Taken from https://dev.to/karanpratapsingh/dockerize-your-go-app-46pp

# Fix DL4006
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

ARG JETS_VERSION

ENV JETS_VERSION=${JETS_VERSION}
RUN echo "----------------jetserver-------------------------" >> /VERSION.txt && \
    echo "JETS_VERSION: ${JETS_VERSION}"                      >> /VERSION.txt && \
    echo "BASE: ${BASE_CONTAINER}=${BASE_VERSION}"            >> /VERSION.txt && \
    echo "----------------*********************-------------" >> /VERSION.txt

USER root

ENV DEBIAN_FRONTEND noninteractive

# # Add postgres repo for server dev
# RUN apt install postgresql-common \
#      && sh /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh -s

RUN \
    apt-get update \
    && apt-get install -y --no-install-recommends software-properties-common python3-software-properties \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
    automake \
    bison \
    build-essential \
    cmake \
    curl \
    flex \
    gcc \
    gnupg \
    less \
    libboost-all-dev \
    # libevent-dev \
    libjemalloc-dev \
    libpq-dev \
    libssl-dev \
    libtool \
    make \
    # miller \
    pkg-config \
    # postgresql-$PG_MAJOR \
    # postgresql-plpython3-$PG_MAJOR \
    # postgresql-server-dev-$PG_MAJOR \
    python3-dev \
    python3-pip \
    python3-setuptools \
    unzip \
    wget \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

RUN dpkg -l


# ARG PQXX_VERSION="7.6.0"
# ENV PQXX_VERSION=${PQXX_VERSION}

# RUN wget -q "https://github.com/jtv/libpqxx/archive/refs/tags/${PQXX_VERSION}.tar.gz"  \
#     && tar xf "${PQXX_VERSION}.tar.gz"  \
#     && cd "libpqxx-${PQXX_VERSION}"  \
#     && ./configure   \
#     && make -j6  \
#     && make install \
#     && ldconfig

ENV EXTERNALS /externals
RUN mkdir -p ${EXTERNALS}
WORKDIR ${EXTERNALS}

ARG SQLITE3_VERSION="3380000"
ENV SQLITE3_VERSION=${SQLITE3_VERSION}

RUN wget -q "https://www.sqlite.org/2022/sqlite-autoconf-${SQLITE3_VERSION}.tar.gz"  \
    && tar xf "sqlite-autoconf-${SQLITE3_VERSION}.tar.gz"  \
    && cd "sqlite-autoconf-${SQLITE3_VERSION}"  \
    && ./configure   \
    && make -j6  \
    && make install \
    && ldconfig

RUN sqlite3 --version

# Abseil
RUN wget -q "https://github.com/abseil/abseil-cpp/archive/ec33f404bb16564a9aea3044cd8504d6885165b0.zip"  \
    && unzip "ec33f404bb16564a9aea3044cd8504d6885165b0.zip"  \
    && cd "abseil-cpp-ec33f404bb16564a9aea3044cd8504d6885165b0"  \
    && mkdir build && cd build \
    && cmake -DCMAKE_CXX_FLAGS=-fPIC -DABSL_BUILD_TESTING=OFF -DCMAKE_CXX_STANDARD=20 .. \
    && make -j6  \
    && make install \
    && ldconfig

# Google Test
ARG GOOGLETEST_PATH="${EXTERNALS}/googletest-c9461a9b55ba954df0489bab6420eb297bed846b"
RUN wget -q "https://github.com/google/googletest/archive/c9461a9b55ba954df0489bab6420eb297bed846b.zip"  \
    && unzip "c9461a9b55ba954df0489bab6420eb297bed846b.zip"  \
    && cd "googletest-c9461a9b55ba954df0489bab6420eb297bed846b"  \
    && mkdir build && cd build \
    && cmake -DCMAKE_CXX_FLAGS=-fPIC -DCMAKE_CXX_STANDARD=20 .. \
    && make -j6  \
    && make install \
    && ldconfig

# Google Flags
RUN wget -q "https://github.com/gflags/gflags/archive/986e8eed00ded8168ef4eaa6f925dc6be50b40fa.zip"  \
    && unzip "986e8eed00ded8168ef4eaa6f925dc6be50b40fa.zip"  \
    && cd "gflags-986e8eed00ded8168ef4eaa6f925dc6be50b40fa"  \
    && mkdir build && cd build \
    && cmake cmake -DCMAKE_CXX_FLAGS=-fPIC -DCMAKE_CXX_STANDARD=20 .. \
    && make -j6  \
    && make install \
    && ldconfig

# Google Log
RUN wget -q "https://github.com/google/glog/archive/d153e294b8c44a1806fdfb523c4fe556ed537581.zip"  \
    && unzip "d153e294b8c44a1806fdfb523c4fe556ed537581.zip"  \
    && cd "glog-d153e294b8c44a1806fdfb523c4fe556ed537581"  \
    && mkdir build && cd build \
    && cmake -DCMAKE_CXX_FLAGS=-fPIC -DCMAKE_CXX_STANDARD=20 .. \
    && make -j6  \
    && make install \
    && ldconfig

# Google Benchmark
RUN wget -q "https://github.com/google/benchmark/archive/e33986a000987387c92ad29590a88fefe12e746b.zip"  \
    && unzip "e33986a000987387c92ad29590a88fefe12e746b.zip"  \
    && cd "benchmark-e33986a000987387c92ad29590a88fefe12e746b"  \
    && mkdir build && cd build \
    && cmake -DCMAKE_CXX_FLAGS=-fPIC -DCMAKE_CXX_STANDARD=20 -DGOOGLETEST_PATH=${GOOGLETEST_PATH} .. \
    && make -j6  \
    && make install \
    && ldconfig

# JetStore Build
ENV JETS_SOURCE_DIR /usr/local/go/src/jetstore
RUN mkdir -p ${JETS_SOURCE_DIR}
WORKDIR ${JETS_SOURCE_DIR}

COPY CMakeLists.txt      ${JETS_SOURCE_DIR}/
COPY go.mod              ${JETS_SOURCE_DIR}/
COPY setup.py            ${JETS_SOURCE_DIR}/
COPY jets                ${JETS_SOURCE_DIR}/jets

ENV JETS_BUILD_DIR /usr/local/go/build
ENV JETS_BIN_DIR /usr/local/go/bin

RUN \
  mkdir -p ${JETS_BUILD_DIR}                                   \
  && cd ${JETS_BUILD_DIR}                                      \
  && cmake -DCMAKE_BUILD_TYPE=Release -DJETS_VERSION=$JETS_VERSION ${JETS_SOURCE_DIR} \
  && make clean                                                       \
  && make -j8                                                         \
  && cd ${JETS_SOURCE_DIR}  \
  && ldconfig 

# python puts it in ${JETS_SOURCE_DIR}/build
RUN python3 setup.py build
  
ENV GOOS linux
ENV CGO_ENABLED 1
RUN go mod tidy
RUN go get all
RUN go mod download

RUN go install jetstore/jets/loader
RUN go install jetstore/jets/server
RUN go install jetstore/jets/bridge
RUN go install jetstore/jets/update_db

# Copy programs resources
RUN cp ${JETS_SOURCE_DIR}/jets/server/jets_schema.json ${JETS_BUILD_DIR}


# ### # ### # ### # ### # ### # ### # ### # ### # ### # ### # ### # ### 

# FROM jetstore_base:go-bullseye

# ARG USER_ID="1000"
# ARG GROUP_ID="1000"
# RUN groupadd -g ${GROUP_ID} jsuser \
#     && useradd -r -u ${USER_ID} -g jsuser jsuser

# # Copy source and define the target (APP_HOME) where we will put the compiled artifacts
# ENV JETS_SOURCE_DIR /home/michel/projects/repos/jetstore
# # Need to define the main app home?
# ENV APP_HOME $JETS_SOURCE_DIR/build
# # Do we still need app_home_scripts for workflow python scripts??
# # Also may need to add subdirectory to last path elm: $JETS_SOURCE_DIR/build/jetserver ?
# ENV PATH "$PATH:$JETS_SOURCE_DIR/app_home_scripts:$APP_HOME:$JETS_SOURCE_DIR/build"
# ENV PYTHONPATH "$PYTHONPATH:$APP_HOME/lib"
# ENV CLASSPATH=".:/usr/local/lib/antlr-${ANTLR4_VERSION}-complete.jar:$CLASSPATH"
# # May need subdirectory where libraries are...
# ENV LD_LIBRARY_PATH "$LD_LIBRARY_PATH:$JETS_SOURCE_DIR/build/jets"
# ENV WORKSPACES_HOME /workspaces
# ENV WORK_HOME /go
# ENV PRE_PROCESS_SCRIPT group_by.py
# ENV INSIGHT_SERVER_SCRIPT $JETS_SOURCE_DIR/build/insight_server/insight_server
# ENV JETSERVER_SCRIPT $APP_HOME/jetserver

# RUN mkdir -p /home/jsuser && chown jsuser /home/jsuser
# RUN mkdir -p ${JETS_SOURCE_DIR} &&  ln -s ${JETS_SOURCE_DIR} jetstore && chown jsuser ${JETS_SOURCE_DIR}
# RUN mkdir -p ${WORKSPACES_HOME} && chown jsuser ${WORKSPACES_HOME}
# RUN mkdir -p ${WORK_HOME}/work && chown jsuser ${WORK_HOME}/work

# WORKDIR ${WORK_HOME}
