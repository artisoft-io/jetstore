ARG BASE_CONTAINER=postgres
FROM ${BASE_CONTAINER}
ARG BASE_CONTAINER

# Fix DL4006
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

ARG JETS_VERSION

ENV JETS_VERSION=${JETS_VERSION}
RUN echo "----------------jetserver-------------------------" >> /VERSION.txt && \
    echo "JETS_VERSION: ${JETS_VERSION}"                      >> /VERSION.txt && \
    echo "BASE: ${BASE_CONTAINER}=${BASE_VERSION}"            >> /VERSION.txt && \
    echo "----------------*********************-------------" >> /VERSION.txt

USER root

ENV DEBIAN_FRONTEND noninteractive

# Add postgres repo for server dev
RUN apt install postgresql-common \
     && sh /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh -s

RUN \
    apt-get update \
    && apt-get install -y --no-install-recommends software-properties-common python3-software-properties \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
    automake \
    bison \
    build-essential \
    cmake \
    curl \
    flex \
    gcc \
    gnupg \
    less \
    libboost-all-dev \
    libevent-dev \
    libjemalloc-dev \
    liblog4cxx-dev \
    libpq-dev \
    libssl-dev \
    libtool \
    libxerces-c-dev \
    libxml2-dev \
    make \
    miller \
    pkg-config \
    postgresql-$PG_MAJOR \
    postgresql-plpython3-$PG_MAJOR \
    postgresql-server-dev-$PG_MAJOR \
    python3-dev \
    python3-pip \
    python3-setuptools \
    unzip \
    wget \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Add Bazel repo & install
RUN curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor > bazel.gpg \
   && mv bazel.gpg /etc/apt/trusted.gpg.d/ \
   && echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | tee /etc/apt/sources.list.d/bazel.list

RUN apt-get update && apt-get install -y bazel

RUN dpkg -l


ARG PQXX_VERSION="7.6.0"
ENV PQXX_VERSION=${PQXX_VERSION}

RUN wget -q "https://github.com/jtv/libpqxx/archive/refs/tags/${PQXX_VERSION}.tar.gz"  \
    && tar xf "${PQXX_VERSION}.tar.gz"  \
    && cd "libpqxx-${PQXX_VERSION}"  \
    && ./configure   \
    && make -j6  \
    && make install \
    && ldconfig


ARG SQLITE3_VERSION="3360000"
ENV SQLITE3_VERSION=${SQLITE3_VERSION}

RUN wget -q "https://www.sqlite.org/2021/sqlite-autoconf-${SQLITE3_VERSION}.tar.gz"  \
    && tar xf "sqlite-autoconf-${SQLITE3_VERSION}.tar.gz"  \
    && cd "sqlite-autoconf-${SQLITE3_VERSION}"  \
    && ./configure   \
    && make -j6  \
    && make install \
    && ldconfig

RUN sqlite3 --version


# Install python packages that rc needs
# Install Anvil Uplink client (https://anvil.works/docs/uplink/quickstart)
RUN pip3 install --no-input \
    aiocsv \
    aiofiles \
    anvil-uplink \
    apsw \
    argo-workflows \
    bcrypt \
    boto3 \
    certifi \
    frozendict \
    openpyxl \
    pandas \
    prometheus_client \
    protobuf \
    psycopg[binary,pool] \
    PyYAML \
    yamlconf \
    && pip3 list


# # Install JaroWinkler package from source
# RUN wget -q "https://github.com/richmilne/JaroWinkler/archive/refs/heads/master.zip" -O  "JaroWinkler-master.zip" \
#     && unzip "JaroWinkler-master.zip"  \
#     && cd "JaroWinkler-master"  \
#     && python3 setup.py build    \
#     && python3 setup.py install

# Copy source and define the target (APP_HOME) where we will put the compiled artifacts
ENV JETS_SOURCE_DIR /home/michel/projects/repos/jetstore
ENV APP_HOME $JETS_SOURCE_DIR/build/jetserver
ENV PATH "$PATH:$JETS_SOURCE_DIR/scripts:$JETS_SOURCE_DIR/utils:$APP_HOME"
ENV PYTHONPATH "$PYTHONPATH:$JETS_SOURCE_DIR/pyjets/build/lib"
# ENV LD_LIBRARY_PATH "$LD_LIBRARY_PATH:$JETS_SOURCE_DIR/build/top_engine:$JETS_SOURCE_DIR/build/rc_engine:$JETS_SOURCE_DIR/build/rclog"
ENV WORKSPACES_HOME /workspaces
ENV WORK_HOME /work
# ENV PRE_PROCESS_SCRIPT group_by.py
ENV JETSERVER_SCRIPT $APP_HOME/jetserver

RUN mkdir -p ${JETS_SOURCE_DIR} &&  ln -s ${JETS_SOURCE_DIR} jetstore && chown 
RUN mkdir -p ${WORKSPACES_HOME}
RUN mkdir -p ${WORK_HOME}

WORKDIR ${WORK_HOME}
