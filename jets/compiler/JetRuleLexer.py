# Generated from JetRule.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,63,536,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,
        1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,
        18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,
        19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
        19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,
        22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,
        24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,
        26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,
        28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,
        39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,
        42,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,46,1,
        46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,51,1,
        51,1,52,1,52,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,56,1,
        56,1,57,1,57,1,58,1,58,1,58,5,58,493,8,58,10,58,12,58,496,9,58,1,
        59,1,59,1,60,4,60,501,8,60,11,60,12,60,502,1,61,1,61,1,61,5,61,508,
        8,61,10,61,12,61,511,9,61,1,61,1,61,1,62,1,62,1,62,1,62,3,62,519,
        8,62,1,63,1,63,5,63,523,8,63,10,63,12,63,526,9,63,1,64,1,64,1,65,
        4,65,531,8,65,11,65,12,65,532,1,65,1,65,1,509,0,66,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
        27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
        38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,
        49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,
        117,59,119,0,121,60,123,61,125,0,127,62,129,0,131,63,1,0,4,3,0,65,
        90,95,95,97,122,1,0,48,57,2,0,10,10,13,13,3,0,9,10,13,13,32,32,540,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
        1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
        1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,
        0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,121,1,
        0,0,0,0,123,1,0,0,0,0,127,1,0,0,0,0,131,1,0,0,0,1,133,1,0,0,0,3,
        135,1,0,0,0,5,137,1,0,0,0,7,139,1,0,0,0,9,141,1,0,0,0,11,143,1,0,
        0,0,13,146,1,0,0,0,15,148,1,0,0,0,17,150,1,0,0,0,19,153,1,0,0,0,
        21,155,1,0,0,0,23,157,1,0,0,0,25,159,1,0,0,0,27,181,1,0,0,0,29,187,
        1,0,0,0,31,201,1,0,0,0,33,211,1,0,0,0,35,228,1,0,0,0,37,237,1,0,
        0,0,39,251,1,0,0,0,41,267,1,0,0,0,43,274,1,0,0,0,45,278,1,0,0,0,
        47,283,1,0,0,0,49,288,1,0,0,0,51,294,1,0,0,0,53,301,1,0,0,0,55,306,
        1,0,0,0,57,311,1,0,0,0,59,320,1,0,0,0,61,325,1,0,0,0,63,334,1,0,
        0,0,65,352,1,0,0,0,67,375,1,0,0,0,69,388,1,0,0,0,71,400,1,0,0,0,
        73,410,1,0,0,0,75,415,1,0,0,0,77,424,1,0,0,0,79,429,1,0,0,0,81,435,
        1,0,0,0,83,440,1,0,0,0,85,444,1,0,0,0,87,451,1,0,0,0,89,454,1,0,
        0,0,91,456,1,0,0,0,93,459,1,0,0,0,95,461,1,0,0,0,97,464,1,0,0,0,
        99,467,1,0,0,0,101,470,1,0,0,0,103,472,1,0,0,0,105,474,1,0,0,0,107,
        476,1,0,0,0,109,478,1,0,0,0,111,481,1,0,0,0,113,485,1,0,0,0,115,
        487,1,0,0,0,117,489,1,0,0,0,119,497,1,0,0,0,121,500,1,0,0,0,123,
        504,1,0,0,0,125,518,1,0,0,0,127,520,1,0,0,0,129,527,1,0,0,0,131,
        530,1,0,0,0,133,134,5,123,0,0,134,2,1,0,0,0,135,136,5,91,0,0,136,
        4,1,0,0,0,137,138,5,93,0,0,138,6,1,0,0,0,139,140,5,44,0,0,140,8,
        1,0,0,0,141,142,5,125,0,0,142,10,1,0,0,0,143,144,5,97,0,0,144,145,
        5,115,0,0,145,12,1,0,0,0,146,147,5,46,0,0,147,14,1,0,0,0,148,149,
        5,58,0,0,149,16,1,0,0,0,150,151,5,45,0,0,151,152,5,62,0,0,152,18,
        1,0,0,0,153,154,5,40,0,0,154,20,1,0,0,0,155,156,5,41,0,0,156,22,
        1,0,0,0,157,158,5,63,0,0,158,24,1,0,0,0,159,160,5,64,0,0,160,161,
        5,74,0,0,161,162,5,101,0,0,162,163,5,116,0,0,163,164,5,67,0,0,164,
        165,5,111,0,0,165,166,5,109,0,0,166,167,5,112,0,0,167,168,5,105,
        0,0,168,169,5,108,0,0,169,170,5,101,0,0,170,171,5,114,0,0,171,172,
        5,68,0,0,172,173,5,105,0,0,173,174,5,114,0,0,174,175,5,101,0,0,175,
        176,5,99,0,0,176,177,5,116,0,0,177,178,5,105,0,0,178,179,5,118,0,
        0,179,180,5,101,0,0,180,26,1,0,0,0,181,182,5,99,0,0,182,183,5,108,
        0,0,183,184,5,97,0,0,184,185,5,115,0,0,185,186,5,115,0,0,186,28,
        1,0,0,0,187,188,5,36,0,0,188,189,5,98,0,0,189,190,5,97,0,0,190,191,
        5,115,0,0,191,192,5,101,0,0,192,193,5,95,0,0,193,194,5,99,0,0,194,
        195,5,108,0,0,195,196,5,97,0,0,196,197,5,115,0,0,197,198,5,115,0,
        0,198,199,5,101,0,0,199,200,5,115,0,0,200,30,1,0,0,0,201,202,5,36,
        0,0,202,203,5,97,0,0,203,204,5,115,0,0,204,205,5,95,0,0,205,206,
        5,116,0,0,206,207,5,97,0,0,207,208,5,98,0,0,208,209,5,108,0,0,209,
        210,5,101,0,0,210,32,1,0,0,0,211,212,5,36,0,0,212,213,5,100,0,0,
        213,214,5,97,0,0,214,215,5,116,0,0,215,216,5,97,0,0,216,217,5,95,
        0,0,217,218,5,112,0,0,218,219,5,114,0,0,219,220,5,111,0,0,220,221,
        5,112,0,0,221,222,5,101,0,0,222,223,5,114,0,0,223,224,5,116,0,0,
        224,225,5,105,0,0,225,226,5,101,0,0,226,227,5,115,0,0,227,34,1,0,
        0,0,228,229,5,97,0,0,229,230,5,114,0,0,230,231,5,114,0,0,231,232,
        5,97,0,0,232,233,5,121,0,0,233,234,5,32,0,0,234,235,5,111,0,0,235,
        236,5,102,0,0,236,36,1,0,0,0,237,238,5,114,0,0,238,239,5,117,0,0,
        239,240,5,108,0,0,240,241,5,101,0,0,241,242,5,95,0,0,242,243,5,115,
        0,0,243,244,5,101,0,0,244,245,5,113,0,0,245,246,5,117,0,0,246,247,
        5,101,0,0,247,248,5,110,0,0,248,249,5,99,0,0,249,250,5,101,0,0,250,
        38,1,0,0,0,251,252,5,36,0,0,252,253,5,109,0,0,253,254,5,97,0,0,254,
        255,5,105,0,0,255,256,5,110,0,0,256,257,5,95,0,0,257,258,5,114,0,
        0,258,259,5,117,0,0,259,260,5,108,0,0,260,261,5,101,0,0,261,262,
        5,95,0,0,262,263,5,115,0,0,263,264,5,101,0,0,264,265,5,116,0,0,265,
        266,5,115,0,0,266,40,1,0,0,0,267,268,5,116,0,0,268,269,5,114,0,0,
        269,270,5,105,0,0,270,271,5,112,0,0,271,272,5,108,0,0,272,273,5,
        101,0,0,273,42,1,0,0,0,274,275,5,105,0,0,275,276,5,110,0,0,276,277,
        5,116,0,0,277,44,1,0,0,0,278,279,5,117,0,0,279,280,5,105,0,0,280,
        281,5,110,0,0,281,282,5,116,0,0,282,46,1,0,0,0,283,284,5,108,0,0,
        284,285,5,111,0,0,285,286,5,110,0,0,286,287,5,103,0,0,287,48,1,0,
        0,0,288,289,5,117,0,0,289,290,5,108,0,0,290,291,5,111,0,0,291,292,
        5,110,0,0,292,293,5,103,0,0,293,50,1,0,0,0,294,295,5,100,0,0,295,
        296,5,111,0,0,296,297,5,117,0,0,297,298,5,98,0,0,298,299,5,108,0,
        0,299,300,5,101,0,0,300,52,1,0,0,0,301,302,5,116,0,0,302,303,5,101,
        0,0,303,304,5,120,0,0,304,305,5,116,0,0,305,54,1,0,0,0,306,307,5,
        100,0,0,307,308,5,97,0,0,308,309,5,116,0,0,309,310,5,101,0,0,310,
        56,1,0,0,0,311,312,5,100,0,0,312,313,5,97,0,0,313,314,5,116,0,0,
        314,315,5,101,0,0,315,316,5,116,0,0,316,317,5,105,0,0,317,318,5,
        109,0,0,318,319,5,101,0,0,319,58,1,0,0,0,320,321,5,98,0,0,321,322,
        5,111,0,0,322,323,5,111,0,0,323,324,5,108,0,0,324,60,1,0,0,0,325,
        326,5,114,0,0,326,327,5,101,0,0,327,328,5,115,0,0,328,329,5,111,
        0,0,329,330,5,117,0,0,330,331,5,114,0,0,331,332,5,99,0,0,332,333,
        5,101,0,0,333,62,1,0,0,0,334,335,5,118,0,0,335,336,5,111,0,0,336,
        337,5,108,0,0,337,338,5,97,0,0,338,339,5,116,0,0,339,340,5,105,0,
        0,340,341,5,108,0,0,341,342,5,101,0,0,342,343,5,95,0,0,343,344,5,
        114,0,0,344,345,5,101,0,0,345,346,5,115,0,0,346,347,5,111,0,0,347,
        348,5,117,0,0,348,349,5,114,0,0,349,350,5,99,0,0,350,351,5,101,0,
        0,351,64,1,0,0,0,352,353,5,99,0,0,353,354,5,114,0,0,354,355,5,101,
        0,0,355,356,5,97,0,0,356,357,5,116,0,0,357,358,5,101,0,0,358,359,
        5,95,0,0,359,360,5,117,0,0,360,361,5,117,0,0,361,362,5,105,0,0,362,
        363,5,100,0,0,363,364,5,95,0,0,364,365,5,114,0,0,365,366,5,101,0,
        0,366,367,5,115,0,0,367,368,5,111,0,0,368,369,5,117,0,0,369,370,
        5,114,0,0,370,371,5,99,0,0,371,372,5,101,0,0,372,373,5,40,0,0,373,
        374,5,41,0,0,374,66,1,0,0,0,375,376,5,108,0,0,376,377,5,111,0,0,
        377,378,5,111,0,0,378,379,5,107,0,0,379,380,5,117,0,0,380,381,5,
        112,0,0,381,382,5,95,0,0,382,383,5,116,0,0,383,384,5,97,0,0,384,
        385,5,98,0,0,385,386,5,108,0,0,386,387,5,101,0,0,387,68,1,0,0,0,
        388,389,5,36,0,0,389,390,5,116,0,0,390,391,5,97,0,0,391,392,5,98,
        0,0,392,393,5,108,0,0,393,394,5,101,0,0,394,395,5,95,0,0,395,396,
        5,110,0,0,396,397,5,97,0,0,397,398,5,109,0,0,398,399,5,101,0,0,399,
        70,1,0,0,0,400,401,5,36,0,0,401,402,5,99,0,0,402,403,5,115,0,0,403,
        404,5,118,0,0,404,405,5,95,0,0,405,406,5,102,0,0,406,407,5,105,0,
        0,407,408,5,108,0,0,408,409,5,101,0,0,409,72,1,0,0,0,410,411,5,36,
        0,0,411,412,5,107,0,0,412,413,5,101,0,0,413,414,5,121,0,0,414,74,
        1,0,0,0,415,416,5,36,0,0,416,417,5,99,0,0,417,418,5,111,0,0,418,
        419,5,108,0,0,419,420,5,117,0,0,420,421,5,109,0,0,421,422,5,110,
        0,0,422,423,5,115,0,0,423,76,1,0,0,0,424,425,5,116,0,0,425,426,5,
        114,0,0,426,427,5,117,0,0,427,428,5,101,0,0,428,78,1,0,0,0,429,430,
        5,102,0,0,430,431,5,97,0,0,431,432,5,108,0,0,432,433,5,115,0,0,433,
        434,5,101,0,0,434,80,1,0,0,0,435,436,5,110,0,0,436,437,5,117,0,0,
        437,438,5,108,0,0,438,439,5,108,0,0,439,82,1,0,0,0,440,441,5,110,
        0,0,441,442,5,111,0,0,442,443,5,116,0,0,443,84,1,0,0,0,444,445,5,
        116,0,0,445,446,5,111,0,0,446,447,5,84,0,0,447,448,5,101,0,0,448,
        449,5,120,0,0,449,450,5,116,0,0,450,86,1,0,0,0,451,452,5,61,0,0,
        452,453,5,61,0,0,453,88,1,0,0,0,454,455,5,60,0,0,455,90,1,0,0,0,
        456,457,5,60,0,0,457,458,5,61,0,0,458,92,1,0,0,0,459,460,5,62,0,
        0,460,94,1,0,0,0,461,462,5,62,0,0,462,463,5,61,0,0,463,96,1,0,0,
        0,464,465,5,33,0,0,465,466,5,61,0,0,466,98,1,0,0,0,467,468,5,114,
        0,0,468,469,5,63,0,0,469,100,1,0,0,0,470,471,5,43,0,0,471,102,1,
        0,0,0,472,473,5,45,0,0,473,104,1,0,0,0,474,475,5,42,0,0,475,106,
        1,0,0,0,476,477,5,47,0,0,477,108,1,0,0,0,478,479,5,111,0,0,479,480,
        5,114,0,0,480,110,1,0,0,0,481,482,5,97,0,0,482,483,5,110,0,0,483,
        484,5,100,0,0,484,112,1,0,0,0,485,486,5,59,0,0,486,114,1,0,0,0,487,
        488,5,61,0,0,488,116,1,0,0,0,489,494,3,119,59,0,490,493,3,119,59,
        0,491,493,3,121,60,0,492,490,1,0,0,0,492,491,1,0,0,0,493,496,1,0,
        0,0,494,492,1,0,0,0,494,495,1,0,0,0,495,118,1,0,0,0,496,494,1,0,
        0,0,497,498,7,0,0,0,498,120,1,0,0,0,499,501,7,1,0,0,500,499,1,0,
        0,0,501,502,1,0,0,0,502,500,1,0,0,0,502,503,1,0,0,0,503,122,1,0,
        0,0,504,509,5,34,0,0,505,508,3,125,62,0,506,508,9,0,0,0,507,505,
        1,0,0,0,507,506,1,0,0,0,508,511,1,0,0,0,509,510,1,0,0,0,509,507,
        1,0,0,0,510,512,1,0,0,0,511,509,1,0,0,0,512,513,5,34,0,0,513,124,
        1,0,0,0,514,515,5,92,0,0,515,519,5,34,0,0,516,517,5,92,0,0,517,519,
        5,92,0,0,518,514,1,0,0,0,518,516,1,0,0,0,519,126,1,0,0,0,520,524,
        5,35,0,0,521,523,3,129,64,0,522,521,1,0,0,0,523,526,1,0,0,0,524,
        522,1,0,0,0,524,525,1,0,0,0,525,128,1,0,0,0,526,524,1,0,0,0,527,
        528,8,2,0,0,528,130,1,0,0,0,529,531,7,3,0,0,530,529,1,0,0,0,531,
        532,1,0,0,0,532,530,1,0,0,0,532,533,1,0,0,0,533,534,1,0,0,0,534,
        535,6,65,0,0,535,132,1,0,0,0,9,0,492,494,502,507,509,518,524,532,
        1,6,0,0
    ]

class JetRuleLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    JetCompilerDirective = 13
    CLASS = 14
    BaseClasses = 15
    AsTable = 16
    DataProperties = 17
    ARRAY = 18
    RULESEQ = 19
    MainRuleSets = 20
    TRIPLE = 21
    Int32Type = 22
    UInt32Type = 23
    Int64Type = 24
    UInt64Type = 25
    DoubleType = 26
    StringType = 27
    DateType = 28
    DatetimeType = 29
    BoolType = 30
    ResourceType = 31
    VolatileResourceType = 32
    CreateUUIDResource = 33
    LookupTable = 34
    TableName = 35
    CSVFileName = 36
    Key = 37
    Columns = 38
    TRUE = 39
    FALSE = 40
    NULL = 41
    NOT = 42
    TOTEXT = 43
    EQ = 44
    LT = 45
    LE = 46
    GT = 47
    GE = 48
    NE = 49
    REGEX2 = 50
    PLUS = 51
    MINUS = 52
    MUL = 53
    DIV = 54
    OR = 55
    AND = 56
    SEMICOLON = 57
    ASSIGN = 58
    Identifier = 59
    DIGITS = 60
    STRING = 61
    COMMENT = 62
    WS = 63

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'['", "']'", "','", "'}'", "'as'", "'.'", "':'", "'->'", 
            "'('", "')'", "'?'", "'@JetCompilerDirective'", "'class'", "'$base_classes'", 
            "'$as_table'", "'$data_properties'", "'array of'", "'rule_sequence'", 
            "'$main_rule_sets'", "'triple'", "'int'", "'uint'", "'long'", 
            "'ulong'", "'double'", "'text'", "'date'", "'datetime'", "'bool'", 
            "'resource'", "'volatile_resource'", "'create_uuid_resource()'", 
            "'lookup_table'", "'$table_name'", "'$csv_file'", "'$key'", 
            "'$columns'", "'true'", "'false'", "'null'", "'not'", "'toText'", 
            "'=='", "'<'", "'<='", "'>'", "'>='", "'!='", "'r?'", "'+'", 
            "'-'", "'*'", "'/'", "'or'", "'and'", "';'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "JetCompilerDirective", "CLASS", "BaseClasses", "AsTable", "DataProperties", 
            "ARRAY", "RULESEQ", "MainRuleSets", "TRIPLE", "Int32Type", "UInt32Type", 
            "Int64Type", "UInt64Type", "DoubleType", "StringType", "DateType", 
            "DatetimeType", "BoolType", "ResourceType", "VolatileResourceType", 
            "CreateUUIDResource", "LookupTable", "TableName", "CSVFileName", 
            "Key", "Columns", "TRUE", "FALSE", "NULL", "NOT", "TOTEXT", 
            "EQ", "LT", "LE", "GT", "GE", "NE", "REGEX2", "PLUS", "MINUS", 
            "MUL", "DIV", "OR", "AND", "SEMICOLON", "ASSIGN", "Identifier", 
            "DIGITS", "STRING", "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "JetCompilerDirective", 
                  "CLASS", "BaseClasses", "AsTable", "DataProperties", "ARRAY", 
                  "RULESEQ", "MainRuleSets", "TRIPLE", "Int32Type", "UInt32Type", 
                  "Int64Type", "UInt64Type", "DoubleType", "StringType", 
                  "DateType", "DatetimeType", "BoolType", "ResourceType", 
                  "VolatileResourceType", "CreateUUIDResource", "LookupTable", 
                  "TableName", "CSVFileName", "Key", "Columns", "TRUE", 
                  "FALSE", "NULL", "NOT", "TOTEXT", "EQ", "LT", "LE", "GT", 
                  "GE", "NE", "REGEX2", "PLUS", "MINUS", "MUL", "DIV", "OR", 
                  "AND", "SEMICOLON", "ASSIGN", "Identifier", "NONDIGIT", 
                  "DIGITS", "STRING", "ESC", "COMMENT", "Cchar", "WS" ]

    grammarFileName = "JetRule.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


